import actor_util "github.com/filecoin-project/specs/actors/util"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import actors "github.com/filecoin-project/specs/actors"

type PowerTableHAMT {addr.Address: block.StoragePower}  // TODO: convert address to ActorID

type MinerEventsHAMT {block.ChainEpoch: actor_util.MinerEventSetHAMT}

type StoragePowerActorState struct {
    TotalNetworkPower         block.StoragePower

    PowerTable                PowerTableHAMT
    EscrowTable               actor_util.BalanceTableHAMT

    // Metadata cached for efficient processing of sector/challenge events.
    CachedDeferredCronEvents  MinerEventsHAMT
    PoStDetectedFaultMiners   actor_util.MinerSetHAMT
    ClaimedPower              PowerTableHAMT
    NominalPower              PowerTableHAMT
    NumMinersMeetingMinPower  int

    _slashPledgeCollateral(address addr.Address, amount actors.TokenAmount) actors.TokenAmount
    _selectMinersToSurprise(challengeCount int, randomness util.Randomness) [addr.Address]

    _addClaimedPowerForSector(
        minerAddr          addr.Address
        storageWeightDesc  SectorStorageWeightDesc
    )
    _deductClaimedPowerForSectorAssert(
        minerAddr          addr.Address
        storageWeightDesc  SectorStorageWeightDesc
    )
    _updatePowerEntriesFromClaimedPower(minerAddr addr.Address)
    _getCurrPledgeForMiner(minerAddr addr.Address) (currPledge actors.TokenAmount, ok bool)
    _getPledgeSlashForConsensusFault(currPledge actors.TokenAmount, faultType ConsensusFaultType) actors.TokenAmount
}

type StoragePowerActorCode struct {
    // Intentionally left blank (VM methods do not require Golang prototypes).
    // Can be filled in once InvokeMethod is implemented for this actor.
}
