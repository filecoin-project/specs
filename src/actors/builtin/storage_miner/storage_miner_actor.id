import abi "github.com/filecoin-project/specs/actors/abi"
import autil "github.com/filecoin-project/specs/actors/util"
import address "github.com/filecoin-project/go-address"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/storage_market/storage_deal"
import filcrypto "github.com/filecoin-project/specs/algorithms/crypto"
import sealing "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import peer "github.com/libp2p/go-libp2p-core/peer"

type MinerPoStState union {
    // Normal operation: The miner has passed either an ElectionPoSt or a SurprisePoSt
    // sufficiently recently.
    OK struct {
        LastSuccessfulPoSt abi.ChainEpoch
    }

    // SurprisePoSt challenge state: The miner has not submitted timely ElectionPoSts,
    // and as a result, the system has fallen back to proving storage via SurprisePoSt.
    Challenged struct {
        SurpriseChallengeEpoch  abi.ChainEpoch
        ChallengedSectors       [sector.SectorNumber]
        NumConsecutiveFailures  int
    }

    // SurprisePoSt faulted state: The miner has failed a SurprisePoSt, indicating that
    // the claimed storage power may not actually be proven. Recovery can proceed by
    // submitting a correct response to a subsequent SurprisePoSt challenge, up until
    // the limit of number of consecutive failures.
    DetectedFault struct {
        NumConsecutiveFailures int
    }
}

type SectorState enum {
    PreCommit
    Active
    TemporaryFault
}

type SectorOnChainInfo struct {
    State                       SectorState
    Info                        sealing.SectorPreCommitInfo  // Also contains Expiration field.
    PreCommitDeposit            abi.TokenAmount
    PreCommitEpoch              abi.ChainEpoch
    ActivationEpoch             abi.ChainEpoch  // -1 if still in PreCommit state.
    DeclaredFaultEpoch          abi.ChainEpoch  // -1 if not currently declared faulted.
    DeclaredFaultDuration       abi.ChainEpoch  // -1 if not currently declared faulted.
    DealWeight                  BigInt  // -1 if not yet validated with StorageMarketActor.

    // Must be significantly larger than DeclaredFaultEpoch, since otherwise it may be possible
    // to declare faults adaptively in order to exempt challenged sectors.
    EffectiveFaultBeginEpoch()  abi.ChainEpoch
    EffectiveFaultEndEpoch()    abi.ChainEpoch

    Is_TemporaryFault()         bool
}

type SectorsAMT {sector.SectorNumber: SectorOnChainInfo}

type SectorNumberSetHAMT {sector.SectorNumber: bool}

// Balance of a StorageMinerActor should equal exactly the sum of PreCommit deposits
// that are not yet returned or burned.
type StorageMinerActorState struct {
    Sectors     SectorsAMT
    PoStState   MinerPoStState
    ProvingSet  SectorNumberSetHAMT
    Info        MinerInfo

    GetStorageWeightDescForSectorMaybe(sectorNumber sector.SectorNumber) (ret autil.SectorStorageWeightDesc, ok bool)
    _getStorageWeightDescForSector(sectorNumber sector.SectorNumber) autil.SectorStorageWeightDesc
    _getStorageWeightDescsForSectors(sectorNumbers [sector.SectorNumber]) [autil.SectorStorageWeightDesc]

    _getSectorDealIDsAssert(sectorNumber sector.SectorNumber) deal.DealIDs

    VerifySurprisePoStMeetsTargetReq(candidate sector.PoStCandidate) bool
}

type StorageMinerActorCode struct {
    // Intentionally left blank (VM methods do not require Golang prototypes).
    // Can be filled in once InvokeMethod is implemented for this actor.
}

type MinerInfo struct {
    // Account that owns this miner.
    // - Income and returned collateral are paid to this address.
    // - This address is also allowed to change the worker address for the miner.
    Owner                   address.Address  // Must be an ID-address.

    // Worker account for this miner.
    // This will be the key that is used to sign blocks created by this miner, and
    // sign messages sent on behalf of this miner to commit sectors, submit PoSts, and
    // other day to day miner activities.
    Worker                  address.Address
    WorkerVRFKey            filcrypto.VRFPublicKey

    // Libp2p identity that should be used when connecting to this miner.
    PeerId                  peer.ID

    // Amount of space in each sector committed to the network by this miner.
    SectorSize              sector.SectorSize
    InstanceCfg             sector.SealInstanceCfg
    SealPartitions          UVarint
    ElectionPoStPartitions  UVarint
    SurprisePoStPartitions  UVarint
}
