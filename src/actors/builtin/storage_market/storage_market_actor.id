import abi "github.com/filecoin-project/specs/actors/abi"
import actor_util "github.com/filecoin-project/specs/actors/util"
import addr "github.com/filecoin-project/go-address"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/storage_market/storage_deal"
import sminer "github.com/filecoin-project/specs/actors/builtin/storage_miner"

type DealsAMT {abi.DealID: deal.OnChainDeal}
type DealWeight deal.DealWeight

type CachedDealIDsByPartyHAMT {addr.Address: actor_util.DealIDSetHAMT}
type CachedExpirationsPendingHAMT {abi.ChainEpoch: DealIDQueue}

type StorageMarketActorState struct {
    Deals                           DealsAMT

    // Total amount held in escrow, indexed by actor address (including both locked and unlocked amounts).
    EscrowTable                     actor_util.BalanceTableHAMT

    // Amount locked, indexed by actor address.
    // Note: the amounts in this table do not affect the overall amount in escrow:
    // only the _portion_ of the total escrow amount that is locked.
    LockedReqTable                  actor_util.BalanceTableHAMT

    NextID                          abi.DealID

    // Metadata cached for efficient iteration over deals.
    CachedDealIDsByParty            CachedDealIDsByPartyHAMT
    CachedExpirationsPending        CachedExpirationsPendingHAMT
    CachedExpirationsNextProcEpoch  abi.ChainEpoch
    CurrEpochNumDealsPublished      int

    _rtAbortIfAddressEntryDoesNotExist(rt Runtime, entryAddr addr.Address)
    _rtUpdatePendingDealStatesForParty(rt Runtime, addr addr.Address) (amountSlashedTotal abi.TokenAmount)
    _rtGetOnChainDealOrAbort(rt Runtime, dealID abi.DealID) (deal deal.OnChainDeal, dealP deal.StorageDealProposal)
    _rtLockBalanceOrAbort(rt Runtime, addr addr.Address, amount abi.TokenAmount)

    _updatePendingDealStates(dealIDs [abi.DealID], epoch abi.ChainEpoch) (amountSlashedTotal abi.TokenAmount)
    _updatePendingDealState(dealID abi.DealID, epoch abi.ChainEpoch) (amountSlashed abi.TokenAmount)
    _processDealPaymentEpochsElapsed(dealID abi.DealID, numEpochsElapsed abi.ChainEpoch)
    _processDealSlashed(dealID abi.DealID) (amountSlashed abi.TokenAmount)
    _processDealInitTimedOut(dealID abi.DealID) (amountSlashed abi.TokenAmount)
    _processDealExpired(dealID abi.DealID)
    _generateStorageDealID(storageDeal deal.StorageDeal) abi.DealID

    _getLockedReqBalanceInternal(a addr.Address) abi.TokenAmount
    _lockBalanceMaybe(addr addr.Address, amount abi.TokenAmount) (lockBalanceOK bool)
    _unlockBalance(addr addr.Address, unlockAmountRequested abi.TokenAmount)

    _getOnChainDeal(dealID abi.DealID) (deal deal.OnChainDeal, dealP deal.StorageDealProposal, ok bool)
    _getOnChainDealAssert(dealID abi.DealID) (deal deal.OnChainDeal, dealP deal.StorageDealProposal)
    _addressEntryExists(address addr.Address) bool
}

type StorageMarketActorCode struct {
    // Deposits the specified amount into the balance held in escrow.
    // Note: the amount is included implicitly in the message.
    AddBalance(rt Runtime)

    // Attempt to withdraw the specified amount from the balance held in escrow.
    // If less than the specified amount is available, yields the entire available balance.
    WithdrawBalance(rt Runtime, amount abi.TokenAmount)

    // Publish a new set of storage deals (not yet included in a sector).
    PublishStorageDeals(rt Runtime, deals [deal.StorageDeal])

    // Verify that a given set of storage deals is valid for a sector currently being PreCommitted.
    VerifyDealsOnSectorPreCommit(
        rt          Runtime
        dealIDs     abi.DealIDs
        sectorInfo  sminer.SectorPreCommitInfo
    )

    // Verify that a given set of storage deals is valid for a sector currently being ProveCommitted,
    // and update the market's internal state accordingly.
    UpdateDealsOnSectorProveCommit(
        rt          Runtime
        dealIDs     abi.DealIDs
        sectorInfo  sminer.SectorProveCommitInfo
    )

    // Get the weight for a given set of storage deals.
    // The weight is defined as the sum, over all deals in the set, of the product of its size
    // with its duration. This quantity may be an input into the functions specifying block reward,
    // sector power, collateral, and/or other parameters.
    GetWeightForDealSet(rt Runtime, dealIDs abi.DealIDs) DealWeight

    // Terminate a set of deals in response to their containing sector being terminated.
    // Slash provider collateral, refund client collateral, and refund partial unpaid escrow
    // amount to client.
    TerminateDealsOnSlashProviderSector(rt Runtime, dealIDs abi.DealIDs)

    // Should be registered with CronActor to be called at the end of each EpochTick iteration.
    // Processes any deals that have expired, as well as any deals for which the timeout
    // has elapsed for their initial appearance in a proven sector.
    OnEpochTickEnd(rt Runtime)
}
