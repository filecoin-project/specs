import vmr "github.com/filecoin-project/specs/actors/runtime"
import abi "github.com/filecoin-project/specs/actors/abi"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"

type VestingFunction enum {
    None
    Linear
    // TODO: potential options
    // PieceWise
    // Quadratic
    // Exponential
}

type Reward struct {
    VestingFunction
    StartEpoch       abi.ChainEpoch
    EndEpoch         abi.ChainEpoch
    Value            abi.TokenAmount
    AmountWithdrawn  abi.TokenAmount

    AmountVested(elapsedEpoch abi.ChainEpoch) abi.TokenAmount
}

// ownerAddr to a collection of Reward
type RewardBalanceAMT {addr.Address: [Reward]}

type RewardActorState struct {
    RewardMap RewardBalanceAMT

    _withdrawReward(rt vmr.Runtime, ownerAddr addr.Address) abi.TokenAmount
}

type RewardActorCode struct {
    Constructor(rt vmr.Runtime)

    // Allocates a block reward to the owner of a miner, less
    // - penalty, which is burnt
    // - any amount of pledge collateral shortfall, which is transferred to storage power actor
    AwardBlockReward(rt vmr.Runtime, miner addr.Address, penalty abi.TokenAmount)

    // withdraw available funds from RewardMap
    WithdrawReward(rt vmr.Runtime)
}
