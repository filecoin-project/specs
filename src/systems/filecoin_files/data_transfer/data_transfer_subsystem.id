import ipld "github.com/filecoin-project/specs/libraries/ipld"
import libp2p "github.com/filecoin-project/specs/libraries/libp2p"

import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"

type StorageDeal struct {}
type RetrievalDeal struct {}

// A DataTransferVoucher is used to validate
// a data transfer request against the underlying storage or retrieval deal
// that precipitated it
type DataTransferVoucher union {
	StorageDealVoucher 
	RetrievalDealVoucher
}

type StorageDealVoucher struct {
	deal StorageDeal
}

type RetrievalDealVoucher struct {
	deal RetrievalDeal 
}

type Ongoing struct {}
type Completed struct {}
type Failed struct {}
type ChannelNotFoundError struct {}

type DataTransferStatus union {
	Ongoing
	Completed
	Failed
	ChannelNotFoundError
}

type TransferID UInt

type ChannelID struct {
	to libp2p.PeerID
	id TransferID
}

// All immutable data for a channel
type DataTransferChannel struct {
	// an identifier for this channel shared by request and responder, set by requestor through protocol
	transferID     TransferID
	// base CID for the piece being transferred
	PieceRef      CID
	// portion of Piece to return, specified by an IPLD selector
	Selector      ipld.Selector
	// used to verify this channel
	voucher       DataTransferVoucher
	// the party that is sending the data (not who initiated the request)
	sender        libp2p.PeerID
	// the party that is receiving the data (not who initiated the request)
	recipient     libp2p.PeerID
	// expected amount of data to be transferred
	totalSize     UVarint
}

// DataTransferState is immutable channel data plus mutable state
type DataTransferState struct @(mutable) {
	DataTransferChannel
	// total bytes sent from this node (0 if receiver)
	sent          UVarint
	// total bytes received by this node (0 if sender)
	received      UVarint
}

type Open struct {}
type Progress struct {}
type Error struct {}
type Complete struct {}

type DataTransferEvent union {
	Open
	Progress
	Error
	Complete
}

type DataTransferSubscriber struct {
	OnEvent(event DataTransferEvent, channelState DataTransferState) struct {}
}

// RequestValidator is an interface implemented by the client of the data transfer module to validate requests
type RequestValidator struct {
	ValidatePush(
		sender libp2p.PeerID, 
		voucher DataTransferVoucher, 
		PieceRef CID, 
		Selector ipld.Selector) struct {}
	ValidatePull(		
		receiver libp2p.PeerID, 
		voucher DataTransferVoucher, 
		PieceRef CID, 
		Selector ipld.Selector) struct {}
}

type DataTransferSubsystem struct @(mutable) {
	host					libp2p.Node
	dataTransfers {ChannelID: DataTransferState}
	requestValidator RequestValidator
	pieceStore    piece.PieceStore

	// open a data transfer that will send data to the recipient peer and
	// open a data transfer that will send data to the recipient peer and
	// transfer parts of the piece that match the selector
	OpenPushDataChannel(to peer.ID, voucher DataTransferVoucher, PieceRef CID, Selector ipld.Selector) ChannelID

	// open a data transfer that will request data from the sending peer and
	// transfer parts of the piece that match the selector
	OpenPullDataChannel(to peer.ID, voucher DataTransferVoucher, PieceRef CID, Selector ipld.Selector) ChannelID
		
	// close an open channel (effectively a cancel)
	CloseDataTransferChannel(x ChannelID)         struct{}
		
	// get status of a transfer
	TransferChannelStatus(x ChannelID)            DataTransferStatus
		
	// get notified when certain types of events happen
	SubscribeToEvents(subscriber DataTransferSubscriber) struct {}

	// get all in progress transfers
	InProgressChannels() {ChannelID:DataTransferState}
}
