import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import actors "github.com/filecoin-project/specs/actors"
import actor_util "github.com/filecoin-project/specs/actors/util"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/storage_market/storage_deal"

// Data in Indices are populated at instantiation with data from the state tree
// Indices itself has no state tree or access to the runtime
// it is a passive data structure that allows for convenience access to network indices
// and pure functions in implementing economic policies given states
type Indices struct {
    // these fields are computed from StateTree upon construction
    // they are treated as globally available states
    Epoch                       block.ChainEpoch
    NetworkKPI                  BigInt
    TotalNetworkSectorWeight    block.SectorWeight
    TotalPledgeCollateral       actors.TokenAmount
    TotalNetworkEffectivePower  block.StoragePower  // power above minimum miner size
    TotalNetworkPower           block.StoragePower  // total network power irrespective of meeting minimum miner size

    TotalMinedFIL               actors.TokenAmount
    TotalUnminedFIL             actors.TokenAmount
    TotalBurnedFIL              actors.TokenAmount
    LastEpochReward             actors.TokenAmount

    // these methods produce policy output based on user state/action
    StorageDeal_ProviderInitTimedOutSlashAmount(deal deal.OnChainDeal) actors.TokenAmount

    StorageDeal_DurationBounds(
        pieceSize   piece.PieceSize
        startEpoch  block.ChainEpoch
    ) (minDuration block.ChainEpoch, maxDuration block.ChainEpoch)

    StorageDeal_StoragePricePerEpochBounds(
        pieceSize   piece.PieceSize
        startEpoch  block.ChainEpoch
        endEpoch    block.ChainEpoch
    ) (minPrice actors.TokenAmount, maxPrice actors.TokenAmount)

    StorageDeal_ProviderCollateralBounds(
        pieceSize   piece.PieceSize
        startEpoch  block.ChainEpoch
        endEpoch    block.ChainEpoch
    ) (
        minProviderCollateral  actors.TokenAmount
        maxProviderCollateral  actors.TokenAmount
    )

    StorageDeal_ClientCollateralBounds(
        pieceSize   piece.PieceSize
        startEpoch  block.ChainEpoch
        endEpoch    block.ChainEpoch
    ) (
        minClientCollateral  actors.TokenAmount
        maxClientCollateral  actors.TokenAmount
    )

    SectorWeight(
        sectorSize  sector.SectorSize
        startEpoch  block.ChainEpoch
        endEpoch    block.ChainEpoch
        dealWeight  deal.DealWeight
    ) block.SectorWeight

    PledgeCollateralReq(
        minerNominalPower block.StoragePower
    ) actors.TokenAmount

    SectorWeightProportion(
        minerActiveSectorWeight block.SectorWeight
    ) BigInt

    PledgeCollateralProportion(
        minerPledgeCollateral actors.TokenAmount
    ) BigInt

    StoragePower(
        minerActiveSectorWeight    block.SectorWeight
        minerInactiveSectorWeight  block.SectorWeight
        minerPledgeCollateral      actors.TokenAmount
    ) block.StoragePower

    StoragePowerProportion(
        minerStoragePower block.StoragePower
    ) BigInt

    CurrEpochBlockReward() actors.TokenAmount

    GetCurrBlockRewardForMiner(
        minerStoragePower      block.StoragePower
        minerPledgeCollateral  actors.TokenAmount
    ) actors.TokenAmount

    StorageMining_PreCommitDeposit(
        sectorSize       sector.SectorSize
        expirationEpoch  block.ChainEpoch
    ) actors.TokenAmount

    StorageMining_TemporaryFaultFee(
        storageWeightDescs  [actor_util.SectorStorageWeightDesc]
        duration            block.ChainEpoch
    ) actors.TokenAmount

    StoragePower_PledgeSlashForSectorTermination(
        storageWeightDesc  actor_util.SectorStorageWeightDesc
        terminationType    actor_util.SectorTerminationType
    ) actors.TokenAmount

    StoragePower_PledgeSlashForSurprisePoStFailure(
        minerClaimedPower       block.StoragePower
        numConsecutiveFailures  int
    ) actors.TokenAmount

    StoragePower_ConsensusMinMinerPower() block.StoragePower

    NetworkTransactionFee(
        toActorCodeID  actor.CodeID
        methodNum      actors.MethodNum
    ) actors.TokenAmount
}
