import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import exitcode "github.com/filecoin-project/specs/systems/filecoin_vm/runtime/exitcode"
import ipld "github.com/filecoin-project/specs/libraries/ipld"
import msg "github.com/filecoin-project/specs/systems/filecoin_vm/message"

// Runtime is the VM's internal runtime object.
// this is everything that is accessible to actors, beyond parameters.
type Runtime interface {
    CurrEpoch() block.ChainEpoch

    // Randomness returns a (pseudo)random stream (indexed by offset) for the current epoch.
    Randomness(e block.ChainEpoch, offset UInt) util.Randomness

    // Note: This is the _immediate_ caller.
    // Not necessarily the actor in the From field of the initial on-chain Message.
    ImmediateCaller() addr.Address
    ValidateImmediateCallerIs(caller addr.Address)
    ValidateImmediateCallerAcceptAnyOfType(type_ actor.BuiltinActorID)
    ValidateImmediateCallerAcceptAny()
    ValidateImmediateCallerMatches(CallerPattern)

    // The address of the actor receiving the message.
    CurrReceiver()         addr.Address

    // The actor who mined the block in which the initial on-chain message appears.
    ToplevelBlockWinner()  addr.Address

    AcquireState()         ActorStateHandle

    SuccessReturn()        InvocOutput
    ValueReturn(Bytes)     InvocOutput

    // Throw an error indicating a failure condition has occurred, from which the given actor
    // code is unable to recover.
    Abort(errExitCode exitcode.ExitCode, msg string)

    // Calls Abort with InvalidArguments_User.
    AbortArgMsg(msg string)
    AbortArg()

    // Calls Abort with InconsistentState_User.
    AbortStateMsg(msg string)
    AbortState()

    // Calls Abort with InsufficientFunds_User.
    AbortFundsMsg(msg string)
    AbortFunds()

    // Calls Abort with RuntimeAPIError.
    // For internal use only (not in actor code).
    AbortAPI(msg string)

    // Check that the given condition is true (and call Abort if not).
    Assert(bool)

    CurrentBalance()  actor.TokenAmount
    ValueReceived()   actor.TokenAmount

    // Run a (pure function) computation, consuming the gas cost associated with that function.
    // This mechanism is intended to capture the notion of an ABI between the VM and native
    // functions, and should be used for any function whose computation is expensive.
    Compute(ComputeFunctionID, args [util.Any]) util.Any

    // Sends a message to another actor.
    // If the invoked method does not return successfully, this caller will be aborted too.
    SendPropagatingErrors(input InvocInput) InvocOutput
    // Sends a message to another actor, trapping an unsuccessful execution.
    // This may only be invoked by the singleton Cron actor.
    SendCatchingErrors(input InvocInput) (output InvocOutput, exitCode exitcode.ExitCode)

    // Computes an address for a new actor. The returned address is intended to uniquely refer to
    // the actor even in the event of a chain re-org (whereas an ID-address might refer to a
    // different actor after messages are re-ordered).
    NewActorAddress() addr.Address

    // Creates an actor in the state tree, with empty state. May only be called by InitActor.
    CreateActor(
        // The new actor's code identifier.
        codeId   actor.CodeID
        // Address under which the new actor's state will be stored.
        address  addr.Address
    )

    IpldGet(c ipld.CID) union {Bytes, error}
    IpldPut(x ipld.Object) ipld.CID
}

type InvocInput struct {
    To      addr.Address
    Method  actor.MethodNum
    Params  actor.MethodParams
    Value   actor.TokenAmount
}

type InvocOutput struct {
    ExitCode     exitcode.ExitCode
    ReturnValue  Bytes
}

type MessageReceipt struct {
    ExitCode     exitcode.ExitCode
    ReturnValue  Bytes
    GasUsed      msg.GasAmount
}  // representation tuple

type ActorStateHandle interface {
    UpdateRelease(newStateCID actor.ActorSubstateCID)
    Release(checkStateCID actor.ActorSubstateCID)
    Take() actor.ActorSubstateCID
}

type ComputeFunctionID Int
