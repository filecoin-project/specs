import sectoridx "github.com/filecoin-project/specs/systems/filecoin_mining/sector_index"
import spc "github.com/filecoin-project/specs/systems/filecoin_blockchain/storage_power_consensus"
import spowact "github.com/filecoin-project/specs/actors/builtin/storage_power"
import sminact "github.com/filecoin-project/specs/actors/builtin/storage_miner"
import abi "github.com/filecoin-project/specs/actors/abi"
import addr "github.com/filecoin-project/go-address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import blockchain "github.com/filecoin-project/specs/systems/filecoin_blockchain"
import blockproducer "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block_producer"
import storage_proving "github.com/filecoin-project/specs/systems/filecoin_mining/storage_proving"
import node_base "github.com/filecoin-project/specs/systems/filecoin_nodes/node_base"
import stateTree "github.com/filecoin-project/specs/systems/filecoin_vm/state_tree"
import msg "github.com/filecoin-project/specs/systems/filecoin_vm/message"
import peer "github.com/libp2p/go-libp2p-core/peer"
import smarkact "github.com/filecoin-project/specs/actors/builtin/storage_market"

type StorageMiningSubsystem struct {
    Node               node_base.FilecoinNode

    // TODO: constructor
    // InitStorageMiningSubsystem(node node_base.FilecoinNode) struct{}

    // Component subsystems
    // StorageProvider    storage_provider.StorageProvider
    StoragePowerActor  spowact.StoragePowerActor
    MinerActor         sminact.StorageMinerActor
    SectorIndex        sectoridx.SectorIndexerSubsystem
    StorageProving     storage_proving.StorageProvingSubsystem

    // Need access to block producer in order to publish blocks
    _blockProducer     blockproducer.BlockProducer

    // Need access to SPC in order to mine a block
    _consensus         spc.StoragePowerConsensusSubsystem

    // Need access to the blockchain system in order to query for things in the chain
    _blockchain        blockchain.BlockchainSubsystem

    // call by StorageMiningSubsystem itself to create miner
    CreateMiner(
        state       stateTree.StateTree
        ownerAddr   addr.Address
        workerAddr  addr.Address
        sectorSize  util.UInt
        peerId      peer.ID
        pledgeAmt   abi.TokenAmount
    )

    // call by StorageMarket.StorageProvider at the start of a deal.
    // Triggers AddNewDeal on SectorIndexer
    // StorageDeal contains DealCID
    HandleStorageDeal(deal smarkact.StorageDeal)

    // call by StorageMinerActor when error in sealing
    CommitSectorError()

    // call by StorageMiningSubsystem itself in BlockProduction
    PrepareNewTicket(
        randomness  abi.RandomnessSeed
        minerAddr   addr.Address
    ) block.Ticket

    _getStorageMinerActorState(stateTree stateTree.StateTree, minerAddr addr.Address) sminact.StorageMinerActorState

    // call by BlockChain when a new block is produced
    OnNewBestChain()

    // call by clock during BlockProduction
    // TODO: define clock better
    OnNewRound()

    _runMiningCycle()
    _tryLeaderElection(st stateTree.StateTree, sma sminact.StorageMinerActorState) abi.OnChainElectionPoStVerifyInfo
    _trySurprisePoSt(st stateTree.StateTree, sma sminact.StorageMinerActorState) error
    _submitSurprisePoStMessage(
        state     stateTree.StateTree
        sPoSt     abi.OnChainSurprisePoStVerifyInfo
        gasPrice  abi.TokenAmount
        gasLimit  msg.GasAmount
    ) error

    VerifyElectionPoSt(
        header       block.BlockHeader
        onChainInfo  abi.OnChainElectionPoStVerifyInfo
    ) bool

    _verifyElection(
        header       block.BlockHeader
        onChainInfo  abi.OnChainElectionPoStVerifyInfo
    ) bool
}
