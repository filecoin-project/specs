import file "github.com/filecoin-project/specs/systems/filecoin_files/file"
import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"

type Path struct {}  // TODO

type SealRandomness Bytes
type InteractiveSealRandomness Bytes

// SealSeed is unique to each Sector
// SealSeed is:
//    SealSeedHash(MinerID, SectorNumber, SealRandomness, UnsealedSectorCID)
type SealSeed Bytes

type SealCfg struct {
    SectorSize   UInt
    WindowCount  UInt
    Partitions   UInt
}

// SealVerifyInfo is the structure of all thte information a verifier
// needs to verify a Seal.
type SealVerifyInfo struct {
    SectorID
    OnChain                OnChainSealVerifyInfo
    SealCfg
    Randomness             SealRandomness
    InteractiveRandomness  InteractiveSealRandomness
    UnsealedCID            UnsealedSectorCID  // CommD
}

// OnChainSealVerifyInfo is the structure of information that must be sent with
// a message to commit a sector. Most of this information is not needed in the
// state tree but will be verified in sm.CommitSector. See SealCommitment for
// data stored on the state tree for each sector.
type OnChainSealVerifyInfo struct {
    SealedCID         SealedSectorCID  // CommR
    SealEpoch         block.ChainEpoch
    InteractiveEpoch  block.ChainEpoch
    Proof             SealProof
    DealIDs           [deal.DealID]
    SectorNumber
}

// SealCommitment is the information kept in the state tree about a sector.
// SealCommitment is a subset of OnChainSealVerifyInfo.
type SealCommitment struct {
    SealedCID   SealedSectorCID  // CommR
    DealIDs     [deal.DealID]
    Expiration  block.ChainEpoch
}

type SectorPreCommitInfo struct {
    SectorNumber
    SealedCID     SealedSectorCID  // CommR
    SealEpoch     block.ChainEpoch
    DealIDs       [deal.DealID]
}

type SectorProveCommitInfo struct {
    SectorNumber
    Proof             SealProof
    InteractiveEpoch  block.ChainEpoch
}

// ProofAux is meta data required to generate certain proofs
// for a sector, for example PoSt.
// These should be stored and indexed somewhere by CommR.
type ProofAux struct {
    CommRLast          Commitment
    CommC              Commitment

    // TODO: This may be a partially-cached tree.
    // this may be empty
    CommRLastTreePath  file.Path
}

type ProofAuxTmp struct {
    PersistentAux   ProofAux

    SectorID
    CommD           Commitment
    CommR           SealedSectorCID
    CommDTreePaths  [file.Path]
    CommCTreePath   file.Path

    Seeds           [SealSeed]
    KeyLayers       [Bytes]
}

type SealArguments struct {
    Algorithm        SealAlgorithm
    OutputArtifacts  SealOutputArtifacts
}

type SealProof struct {//<curve, system> {
    Config      SealProofConfig
    ProofBytes  Bytes
}

type SealProofConfig struct {// TODO
}

// TODO: move into proofs lib
type FilecoinSNARKProof struct {}  //<bls12-381, Groth16>

type SealAlgorithm enum {
    StackedDRG
}

// TODO
type SealOutputArtifacts struct {}

// TODO: PieceInfo is the name used by proofs for this struct, but there also exists a piece.PieceInfo type, which is different.
// We should probably rename one of them, since this is quite confusing. Or, if we can put `PieceCID` into pieces.PieceInfo, we can just use that.
type PieceInfo struct {
    Size      UVarint  // Size in nodes. For BLS12-381 (capacity 254 bits), must be >= 16. (16 * 8 = 128)
    PieceCID  piece.PieceCID

    // Data returns the serialized representation of the PieceInfo.
    Data()    Bytes
}
