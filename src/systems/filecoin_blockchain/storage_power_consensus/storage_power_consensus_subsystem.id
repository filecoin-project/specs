import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import st "github.com/filecoin-project/specs/systems/filecoin_vm/state_tree"
import filcrypto "github.com/filecoin-project/specs/algorithms/crypto"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"

type StoragePowerConsensusSubsystem struct {//(@mutable)
    // actor                StoragePowerActor
    associatedStateTree &st.StateTree  // TODO: remove this. should not store this here.

    GenerateElectionProof(tipset block.Tipset) block.ElectionProof
    ChooseTipsetToMine(tipsets [block.Tipset]) [block.Tipset]

    ec ExpectedConsensus

    // call by BlockchainSubsystem during block reception
    ValidateBlock(block block.Block) error

    IsWinningChallengeTicket(
        challengeTicket sector.ChallengeTicket
    ) bool

    validateElectionProof(
        height         block.ChainEpoch
        electionProof  block.ElectionProof
        workerAddr     addr.Address
    ) bool

    validateTicket(tix block.Ticket, pk filcrypto.VRFPublicKey) bool

    computeChainWeight(tipset block.Tipset) block.ChainWeight

    StoragePowerConsensusError() StoragePowerConsensusError

    // Randomness methods

    // call by StorageMiningSubsystem during block production
    GetTicketProductionSeed(chain block.Chain, epoch block.ChainEpoch) block.Randomness

    // call by StorageMiningSubsystem during block production
    GetElectionProofSeed(chain block.Chain, epoch block.ChainEpoch) block.Randomness

    // call by StorageMiningSubsystem in sealing sector
    GetSealSeed(chain block.Chain, epoch block.ChainEpoch) block.Randomness

    // call by StorageMiningSubsystem after sealing
    GetPoStChallenge(chain block.Chain, epoch block.ChainEpoch) block.Randomness

    GetFinality()     block.ChainEpoch
    FinalizedEpoch()  block.ChainEpoch
}

type StoragePowerConsensusError struct {}
