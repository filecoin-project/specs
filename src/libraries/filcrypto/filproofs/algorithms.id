import abi "github.com/filecoin-project/specs-actors/actors/abi"
import file "github.com/filecoin-project/specs/systems/filecoin_files/file"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import sectorIndex "github.com/filecoin-project/specs/systems/filecoin_mining/sector_index"

type WinStackedDRGLayers UInt
type WinStackedDRGNodeSize UInt
type WinStackedDRGNodes UInt
type WinStackedDRGWindowCount UInt
type WinStackedDRGPartitions UInt
type WinStackedDRGChallenges UInt
type WinStackedDRGWindowChallenges UInt

type PoStLeafChallengeCount UInt
type PoStChallengeRangeSize UInt

type DRGDepth struct {}
type DRGFraction struct {}
type DRGDegree UInt
type DRGSeed struct {}
type DRGNodeCount UInt
type ExpanderGraphNodeCount UInt
type ChungExpanderPermutationFeistelKeys [UInt]
type ChungExpanderPermutationFeistelRounds UInt
type ChungExpanderPermutationFeistelHashFunction enum {
    Blake2S
    SHA256
}
type ChungExpanderAlpha struct {}
type ChungExpanderBeta struct {}
type ExpanderGraphDegree UInt
type ExpanderGraphSeed struct {}
type DRGNodeSize UInt

type SealAlgorithmArtifacts struct {
    AlgorithmWideSetupArtifacts struct {
        // trusted setup output parameters go here
        // updates to public parameters go here
    }

    SealSetupArtifacts

    // ProveArtifacts or
    ChallengeArtifacts struct {
        // inputs into prove() go here
    }

    VerifyArtifacts struct {
        // inputs into verify() go here
    }
}

// per-sector setup artifacts go here
type SealSetupArtifacts struct {
    CommD              sector.Commitment
    CommR              abi.SealedSectorCID
    CommC              sector.Commitment
    CommQ              sector.Commitment
    CommRLast          sector.Commitment
    CommDTreePath      file.Path
    CommCTreePath      file.Path
    CommQTreePath      file.Path
    CommRLastTreePath  file.Path
    Seed               sector.SealSeed
    KeyLayers          [Bytes]
    Replica            Bytes  // This is what we challenge in PoSt. It will be regenerated just in time. Should probably be removed from here.
}

type EllipticCurve struct {
    FieldModulus &util.BigInt
}

type WinStackedDRG struct {
    Layers                  WinStackedDRGLayers
    NodeSize                WinStackedDRGNodeSize
    Nodes                   WinStackedDRGNodes
    WindowCount             WinStackedDRGWindowCount
    Partitions              WinStackedDRGPartitions
    Challenges              WinStackedDRGChallenges
    WindowChallenges        WinStackedDRGWindowChallenges
    Algorithm               struct {}
    DRGCfg
    ExpanderGraphCfg
    WindowDRGCfg            DRGCfg
    WindowExpanderGraphCfg  ExpanderGraphCfg
    // invariant: DRGCfg.Nodes == ExpanderGraphCfg.Nodes
    Curve                   EllipticCurve
    RegisteredProof         abi.RegisteredProof
    Cfg                     SealInstanceCfg

    Drg()                   DRG
    Expander()              ExpanderGraph

    WindowDrg()             DRG
    WindowExpander()        ExpanderGraph

    Seal(
        registeredProof  abi.RegisteredProof
        sid              abi.SectorID
        data             Bytes
        randomness       abi.SealRandomness
    ) SealSetupArtifacts
    CreateSealProof(
        challengeSeed  abi.InteractiveSealRandomness
        aux            sector.ProofAuxTmp
    ) abi.SealProof
    CreatePrivateSealProof(
        randomness  abi.InteractiveSealRandomness
        aux         sector.ProofAuxTmp
    ) PrivateOfflineProof

    CreateOfflineCircuitProof(
        challengeProofs  [OfflineWindowProof]
        aux              sector.ProofAuxTmp
    ) abi.SealProof
    VerifyPrivateSealProof(
        privateProof  [OfflineWindowProof]
        sealSeeds     [sector.SealSeed]
        randomness    abi.InteractiveSealRandomness
        commD         Commitment
        commR         abi.SealedSectorCID
    ) bool
    VerifySeal(sv abi.SealVerifyInfo) bool

    GenerateElectionPoStCandidates(
        challengeSeed    abi.PoStRandomness
        eligibleSectors  [abi.SectorNumber]
        candidateCount   int
        sectorStore      sectorIndex.SectorStore
    ) [abi.PoStCandidate]
    CreateElectionPoStProof(privateProofs [PrivatePoStProof]) abi.PoStProof
    VerifyElectionPoSt(sv abi.PoStVerifyInfo) bool

    GenerateSurprisePoStCandidates(
        challengeSeed    abi.PoStRandomness
        eligibleSectors  [abi.SectorNumber]
        candidateCount   int
        sectorStore      sectorIndex.SectorStore
    ) [abi.PoStCandidate]
    CreateSurprisePoStProof(privateProofs [PrivatePoStProof]) abi.PoStProof
    VerifySurprisePoSt(sv abi.PoStVerifyInfo) bool
    CreatePrivatePoStProof(
        candidateProofs  [abi.PrivatePoStCandidateProof]
        challengeSeed    abi.PoStRandomness
        aux              sector.PersistentProofAux
    ) PrivatePoStProof
    VerifyPrivatePoStProof(
        privateProof  PrivatePoStProof
        candidates    [abi.PoStCandidate]
        commRLast     sector.Commitment
    ) bool
}

type SealVerifier struct {
    SealCfg SealInstanceCfg
}

type PoStVerifier struct {
    PoStCfg PoStInstanceCfg
}

type DRGCfg struct {
    Algorithm struct {
        Depth     DRGDepth  // D
        Fraction  DRGFraction  // E

        ParentsAlgorithm enum {
            DRSample
        }

        RNGAlgorithm enum {
            ChaCha20
        }
    }
    Degree DRGDegree
    Seed DRGSeed
    Nodes DRGNodeCount
}

type DRG struct {
    Config         DRGCfg
    Parents(UInt)  [UInt]
}

type ExpanderGraphCfg struct {
    Algorithm union {
        ChungExpanderAlgorithm
    }

    Degree  ExpanderGraphDegree
    Seed    ExpanderGraphSeed
    Nodes   ExpanderGraphNodeCount
}

type ExpanderGraph struct {
    Config         ExpanderGraphCfg
    Parents(UInt)  [UInt]
}

type ChungExpanderAlgorithm struct {
    Alpha  ChungExpanderAlpha
    Beta   ChungExpanderBeta
    PermutationAlgorithm union {
        Feistel
    }
    Parents(node UInt, ExpanderGraphDegree, nodes ExpanderGraphNodeCount) [UInt]
}

type Feistel struct {
    Keys          ChungExpanderPermutationFeistelKeys
    Rounds        ChungExpanderPermutationFeistelRounds
    HashFunction  ChungExpanderPermutationFeistelHashFunction
    Permute(size UInt, n UInt) UInt
}

type MerkleTree struct {
    ProveInclusion(challenge UInt) InclusionProof
    Leaf(index UInt) Bytes
}

// TODO: Needs to be generic over hash.
type InclusionProof struct {
    Leaf()       Bytes
    LeafIndex()  UInt
    Root()       Commitment
    Verify(root Bytes, challenge UInt) bool
}

type ProofRegistry {UInt: ProofInstance}

type ProofInstance struct {
    // FIXME: move some or all of these types into filproofs.
    ID           abi.RegisteredProof
    Type         ProofType
    Algorithm    ProofAlgorithm
    CircuitType  ConcreteCircuit
    Partitions   UInt
    Cfg          ProofCfg
}

type ConcreteCircuit struct {
    // Name must be globally unique. It will be a hash derived from semantic content of circuit.
    Name                      string
    GrothParameterFileName()  string
    VerifyingKeyFileName()    string
}

type ProofCfg union {
    SealCfg  SealInstanceCfg
    PoStCfg  PoStInstanceCfg
}

type ProofType enum {
    SealProof
    PoStProof
}

type ProofAlgorithm enum {
    StackedDRGSeal
    WinStackedDRGSeal
    StackedDRGPoSt
    WinStackedDRGPoSt
}

// New proof ProofInstances can add new cfg types if needed.
type SealInstanceCfg union {
    WinStackedDRGCfgV1
}

type WinStackedDRGCfgV1 struct {
    SectorSize   abi.SectorSize
    WindowCount  UInt
}

// New proof ProofInstances can add new cfg types if needed.
type PoStInstanceCfg union {
    PoStCfgV1
    PoStCfgVBogus
}

type PoStCfgV1 struct {
    Type                PoStType
    Nodes               UInt
    Partitions          UInt
    LeafChallengeCount  UInt
    ChallengeRangeSize  UInt
}

type PoStCfgVBogus struct {
    Type                 PoStType
    Nodes                UInt
    Partitions           UInt
    QuantumMonkeyBrains  UInt
}

type PoStType enum {
    ElectionPoSt
    SurprisePoSt
}
