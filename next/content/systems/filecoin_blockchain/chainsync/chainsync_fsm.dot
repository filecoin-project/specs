digraph sector {
  compound=true;
  // splines=curved;
  edge [style=solid]

  { // states
    node [shape=box, fontname="monospace", style=filled, color=gray84]
    INIT
    BOOTSTRAP
    SYNC_CHECKPOINT
    CHAIN_CATCHUP
    CHAIN_FOLLOW [color=seagreen3]
  }

  { // transitions
    node [shape=none]
    init2boot [label=< <i>prepare and verify<br/>all internal state</i> >]
    boot2check [label=< <i>done bootstrapping.<br/><b>DO NOT</b>   have state for<br/><u>LastTrustedCheckpoint</u></i> >]
    boot2catch [label=< <i>done bootstrapping.<br/><b>DO</b>   have state for<br/><u>LastTrustedCheckpoint</u></i> >]
    check2catch [label=< <i>done getting state for<br/><u>LastTrustedCheckpoint</u></i> >]
    catch2follow [label=< <i>done validating<br/>up to <u>BestTargetHead</u></i> >]
    {
      follow2catch [label=< <i>new unvalidated gap between<br/><u>ValidG</u>   and <u>BestTargetHead</u></i> >, constraint=false, color=red, fontcolor=red]
      follow2init [label=< <i>on shut down node</i> >, constraint=false, color=red, fontcolor=red, pos="6,3!"]
    }
  }

  { // transition 1
    edge [arrowhead=none]
    INIT            -> init2boot
    BOOTSTRAP       -> boot2check
    BOOTSTRAP       -> boot2catch
    SYNC_CHECKPOINT -> check2catch
    CHAIN_CATCHUP   -> catch2follow
  }

  { // transition 2
    init2boot       -> BOOTSTRAP
    boot2check      -> SYNC_CHECKPOINT
    boot2catch      -> CHAIN_CATCHUP
    check2catch     -> CHAIN_CATCHUP
    catch2follow    -> CHAIN_FOLLOW
  }

  { // transition backs (reversed)
    {
      edge [dir=back]
      CHAIN_CATCHUP   -> follow2catch    [color=red]
      INIT            -> follow2init     [color=red]
    }

    {
      edge [dir=none]
      follow2catch    -> CHAIN_FOLLOW    [constraint=false, color=red]
      // follow2init     -> CHAIN_FOLLOW    [color=red]
    }
  }
}
